buildscript {
	ext {
		springBootVersion = '1.5.2.RELEASE'
		springShellVersion = '1.2.0.RELEASE'

		sourceCompatibility = 1.8
		targetCompatibility = 1.8
	}
	repositories {
		mavenCentral()
		mavenLocal()
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
		classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
	}
}

subprojects {
	group 'io.gitlab.arturbosch.tinbo'

	apply plugin: 'kotlin'
	apply plugin: 'maven-publish'

	def projectName = it.name
	if (projectName != "tinbo-plugin-api" && projectName != "tinbo-platform") {
		dependencies {
			compileOnly project(":tinbo-plugin-api")
			testCompile project(":tinbo-plugin-api")
		}
	}

	repositories {
		mavenCentral()
		mavenLocal()
		maven { url "http://dl.bintray.com/arturbosch/code-analysis" }
		maven { url "http://dl.bintray.com/arturbosch/generic" }
	}


	dependencies {
		compileOnly "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
		testCompile "junit:junit:4.12"
		testCompile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
		testCompile "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
			}
		}
	}

	sourceSets {
		main.java.srcDirs += 'src/main/kotlin'
	}
}

configurations {
	detekt
	smartsmells
}

dependencies {
	detekt 'io.gitlab.arturbosch.detekt:detekt-cli:1.0.0.M8'
	detekt 'io.gitlab.arturbosch.detekt:detekt-formatting:1.0.0.M8'
	smartsmells 'io.gitlab.arturbosch.smartsmells:SmartSmells:1.0.0.RC3'
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.0'
}

task detekt {
	doLast {
		javaexec {
			main = "io.gitlab.arturbosch.detekt.cli.Main"
			classpath = configurations.detekt
			def input = "$project.projectDir.absolutePath"
			def config = "$project.projectDir/detekt.yml"
			def filters = ".*test.*"
			def rulesets = ""
			def params = ['-p', input, '-c', config, '-f', filters, '-r', rulesets]
			args(params)
		}
	}
}

task smartsmells(type: JavaExec) {
	main = "io.gitlab.arturbosch.smartsmells.Main"
	classpath = configurations.smartsmells
	def input = "$project.projectDir.absolutePath"
	def output = "$project.projectDir/smartsmells.xml"
	def params = ['-i', input, '-o', output, '-f', ".*/test/.*", "-fs"]
	args(params)
}
